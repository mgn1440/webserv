WebServer
{
public:
	setTCP() // socket bind kqueue...
	runTCP() // while loop and accept
	WebServer(std::string conf_file);
private:
	map<int socket, std::string response> Response;
	// Response[socket] += Http.makeResponse(string request);
class:
	Http
}

Http
{
public:
	std::string makeResponse(std::string request);
	Http(std::string conf_file);
private:
	struct request parseHttpRequest();
class:
	HttpResponse
}

HttpResponse
{
public:
	std::string getHttpResponse(struct request);
	HttpResponse(std::string conf_file); // create and parse => create servers
private:
	ConfigHandler* confighandler;
}

class ConfigHandler
{
public:
	void PrintInfo(int port); //debug
	const long long* GetMaxSizes(int port); // need to request parsing
	std::string getResourceOf(struct request); // 전치사 붙이기
};

Server // resource and cgi process
{
public:
	std::string getResourceOf(struct request)
class:
	map<string url, Location> location;
}

Location
{
method:
	std::string getResource(struct request)
class:
}