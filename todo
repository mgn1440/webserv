WebServer
{
public:
	WebServer(std::string confFile);
private:
	std::map<int clientSocket, Request> mRequestMap;
	std::map<int clientSocket, std::queue<Response> > mResponseMap;
}

// singleton pattern
ConfigHandler
{
public:
	static void MakeConfigHandler(std::string confFile);
	static ConfigHandler* GetConfigHandler();
	size_t* GetMaxSizes(int port, std::string serverName); // need to request parsing
	std::queue<Response> GetResponseOf(std::vector<struct Request> requests);
private:
	static ConfigHandler* configHandler;
	ConfigHandler(std::string confFile);
	std::map<std::pair<int port, std::string serverName>, Server> mServerMap;
	std::map<std::string format, std::string type> mTypesMap;
}

Server
{
public:
	Server(std::ifstream& ifs);
private:
	map<std::string uri, Location> location;
}

Location
{
public:
	Location(std::ifstream& ifs);
private:

}

Request
{
public:
	Request(int port);
	std::vector<struct Request> GetRequestsOf(std::string buf);
}

Response
{
public:
	Response();
	bool IsCGI();
	std::string GetErrorPage(int errorCode);
	std::string GetResponse();
	void AppendCGIBody(const std::string& CGIBody); // CGI에서 받은 body를 저장
private:
	bool CGI;
	std::string body;

	int pipefd;
}

// Response 생성자
// Response 생성자에서는 Response를 생성할 때 CGI인지 아닌지를 판단한다.
// Response queue를 반환하면, kqueue에서 이벤트(EVFILT_READ(pipe), EVFILT_WRITE(Response), EVFILT_PROC(CGI))

ConfigHandler의 GetRepsonseOf 내부에서 Response Array를 만들어 반환한다.
이 때 GetResponseOf함수에 들어오는 Request 인자는 무결하다고 가정 후 진행한다.
	HTTP 1.1만 처리하도록 한다.
Http Request로부터 directory path를 보고 ConfigHandler를 순회하면서 파일을 확인한다.
Method가 처리할 수 있는지 또한 확인한다.

std::queue<Response> ConfigHandler::GetResponseOf(std::vector<struct Request> requests);

마지막으로 모든 부분이 되어 있다면 status를 정상적으로 세팅한다.